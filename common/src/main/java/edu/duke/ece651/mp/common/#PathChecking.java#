package edu.duke.ece651.mp.common;

import java.util.ArrayDeque;
import java.util.Deque;
import java.util.HashMap;
import java.util.HashSet;

public class PathChecking<T> extends MoveChecking<T> {

  public PathChecking(MoveChecking<T> next) {
    super(next);
  };

  /**
   * Method to check if there is a valid path from the source to destination (the
   * path must be through the player's own territories)
   */
  public String checkMyRule(Map<T> map, String source, String destination, HashMap<String, Integer> allunits) {
    // Algorithm used: Depth First Search
    Deque<Territory<T>> stack = new ArrayDeque<>();

    // Keep track of territories visited to avoid loop
    HashSet<Territory<T>> visited = new HashSet<>();

    // get the source territory
    Territory<T> start = map.getAllTerritories().get(source);
    stack.push(start);
    String colorID = start.getColor();

    // while all the territories are not visited
    while (!stack.isEmpty()) {
      Territory<T> currTerritory = stack.pop();
      String currname = currTerritory.getName();

      if (currname.equals(destination)) { // found a path
        return null;
      }

      // if the territory is not visited already
      if (!visited.contains(currTerritory)) {
        visited.add(currTerritory);

        // for each neighbour of this territory
        for (String s : currTerritory.getAdjacency()) {
          Territory<T> thisTerritory = map.getAllTerritories().get(s);
          // if the territory is owned by the player
          if (thisTerritory.getColor().equals(colorID)) {
            stack.push(thisTerritory);
          }
        }
      }
    }
    return "no valid path exists";
  }
}
